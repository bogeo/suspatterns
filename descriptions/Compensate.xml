<?xml version="1.0" ?>
<pattern patternID="1" collection="candidates" 
		xsi:noNamespaceSchemaLocation="../plml/plml_bo-2.0.xsd" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<name>Compensate</name>
	<alias>Regenerative operation</alias>
	<problem>
		Software operation consumes electric energy. Now the carbon dioxide 
		(CO2) emission that is induced by the operation of the software shall 
		be reduced.
	</problem>
	<solution>
		Reduce the share of consumed fossil energy by suitable compensation 
		measures and assert these measures indeed will be implemented [1].
		Compensation example: A potential way to offset your greenhouse gas 
		emissions would be planting trees (since every tree captures CO2). 
		Later on, one has to care for the trees planted for carbon neutrality 
		until the amount of CO2 to be compensated is removed from the 
		atmosphere and the carbon is stored in the wood.
	</solution>
	<diagram location="Compensate.jpg"/>
	<literature>
		<ref id="1">
			Schmidt, B. (2019): Towards a Formal Language to Describe 
			Sustainable Software Patterns. Bochum: University of Applied 
			Sciences. Submitted paper.
		</ref>
 	</literature>
 	<formalization language="CafeOBJ">
		<participant identifier="S" type="uml$Executable"/>
		<participant identifier="Us" type="sus$Actor"/>
		<participant identifier="recorder" type="op consume : uml$Executable -> sus$Energy"/>
		<participant identifier="disposer" type="pred _dispose : sus$Carbon"/>
		<source-code location="Compensate.cafe"/>
	</formalization>
	<related-patterns>
		<pattern-link type="related-to" patternID="99" collection="candidates" 
			label="raise sustainability awareness"/>
	</related-patterns>
	<management>
		<author>Benno Schmidt</author>
		<revision-number>0.4</revision-number>
		<creation-date>01.07.2019</creation-date>
		<last-modified>16.07.2019</last-modified>
	</management>
</pattern>
